generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/client"
}

// datasource db {
//   provider = "sqlite"
//   url      = "file:./dev.db"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  email       String        @unique
  password    String        @default("fghjkasdfgrew")
  name        String?
  posts       Post[]
  profile     Profile?
  Room        Room[]
  Participant Participant[]
  Message     Message[]
}

model Room {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  roomName    String
  roomAdmin   User?         @relation(fields: [createdBy], references: [id])
  createdBy   Int
  Participant Participant[]
  Message     Message[]
}

model Participant {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roomData    Room?    @relation(fields: [roomId], references: [id])
  roomId      Int
  participant User?    @relation(fields: [userId], references: [id])
  userId      Int
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  message   String
  userData  User?    @relation(fields: [userId], references: [id])
  userId    Int
  roomData  Room?    @relation(fields: [roomId], references: [id])
  roomId    Int
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String?
  published Boolean  @default(false)
  viewCount Int      @default(0)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
}
