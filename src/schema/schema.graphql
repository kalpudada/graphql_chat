type Mutation {
  createDraft(authorEmail: String!, data: PostCreateInput!): Post
  deletePost(id: Int!): Post
  incrementPostViewCount(id: Int!): Post
  signupUser(data: UserCreateInput!): User!
  togglePublishPost(id: Int!): Post
  login(email: String, password: String): User!
  createRoom(data: RoomCreateInput): Room
  addParticipant(data: AddParticipantInput): Room
  sendMessage(data: AddMessageInput): Message
}

type Post {
  author: User
  content: String
  createdAt: DateTime!
  id: Int!
  published: Boolean!
  title: String!
  updatedAt: DateTime!
  viewCount: Int!
}

type Room {
  id: Int!
  roomName: String!
}

type Message {
  id: Int!
  message: String!
}

input RoomCreateInput {
  roomName: String!
  participants: [Int]!
}

input PostCreateInput {
  content: String
  title: String!
}

input PostOrderByUpdatedAtInput {
  updatedAt: SortOrder!
}

type Query {
  allUsers: [User!]!
  draftsByUser(userUniqueInput: UserUniqueInput!): [Post]
  feed(
    orderBy: PostOrderByUpdatedAtInput
    searchString: String
    skip: Int
    take: Int
  ): [Post!]!
  postById(id: Int): Post
}

enum SortOrder {
  asc
  desc
}

type User {
  email: String!
  password: String!
  id: Int!
  name: String
  posts: [Post!]!
  token: String
}

input UserCreateInput {
  email: String!
  password: String!
  name: String
  posts: [PostCreateInput!]
}

input UserSignInInput {
  email: String!
  password: String!
}

input UserUniqueInput {
  email: String
  id: Int
}

scalar DateTime

type Subscription {
  # newPost: Post
  postCreated: Post
  addedToRoom: Room
  newMessage: Message
  userIsOnline: User
  userIsTyping: User
}

input AddParticipantInput {
  roomId: Int!
  participants: [Int]!
}

input AddMessageInput {
  roomId: Int!
  message: String!
}

union SearchResult = User | Post

type Post {
  title: String!
}

type User {
  name: String!
}

type Query {
  search(contains: String): [SearchResult!] 
}

"type query defines all entry points"
type Query {
  getAllPosts(
    "Description for argument"
    postId: Int
  )
}

"type User represents a user model of our schema"
type User {
  """
  Description for field
  Supports **multi-line**

  name should be string and not null
  """
  name: String!
}

